basePath: /api/v1
definitions:
  main.ContestantDTO:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  main.GameResultDTO:
    properties:
      endTime:
        type: number
      splitTime:
        type: number
    type: object
  main.LeaderboardEntryDTO:
    properties:
      contestant:
        $ref: '#/definitions/main.ContestantDTO'
      result:
        $ref: '#/definitions/main.GameResultDTO'
    type: object
  main.QueueItemDTO:
    properties:
      contestant:
        $ref: '#/definitions/main.ContestantDTO'
      timestamp:
        type: integer
    type: object
info:
  contact: {}
paths:
  /contestants:
    get:
      consumes:
      - application/json
      description: Get contestants based on filter one of ALL, NOT_ENQUEUED or ENQUEUED
      parameters:
      - description: One of ALL, NOT_ENQUEUED or ENQUEUED. If omitted ALL is used.
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.ContestantDTO'
            type: array
      summary: Get contestants
      tags:
      - example
    post:
      consumes:
      - application/json
      description: Add a contestant to the database
      parameters:
      - description: Contestant to add
        in: body
        name: contestant
        required: true
        schema:
          $ref: '#/definitions/main.ContestantDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.QueueItemDTO'
      summary: Add a contestant
      tags:
      - example
  /game-abort:
    post:
      consumes:
      - application/json
      description: Abort the ongoing game and respond with a status message
      produces:
      - application/json
      responses:
        "200":
          description: aborted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema: {}
      summary: Abort the current game
      tags:
      - example
  /game-finish:
    post:
      consumes:
      - application/json
      description: Finish a game and save the result in the database
      parameters:
      - description: Result of the game
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/main.GameResultDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.LeaderboardEntryDTO'
            type: array
      summary: Finish a game and save the result
      tags:
      - example
  /game-start:
    post:
      consumes:
      - application/json
      description: Start a game for a contestant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ContestantDTO'
      summary: Start a game for a contestant
      tags:
      - example
  /queue/{timestamp}:
    delete:
      consumes:
      - application/json
      description: Delete a contestant from the queue
      parameters:
      - description: timestamp of the contestant to delete
        in: path
        name: timestamp
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a contestant from the queue
      tags:
      - example
swagger: "2.0"
